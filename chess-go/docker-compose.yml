services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - chess-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "29092:29092"
      - "9092:9092"
    networks:
      - chess-network
    
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      - kafka
    networks:
      - chess-network

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: chess
      POSTGRES_USER: chess
      POSTGRES_PASSWORD: chesspass
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - chess-network

  go-api:
    build: ./go-api
    ports:
      - "8080:8080"
    environment:
      - KAFKA_BROKERS=kafka:9092
      - POSTGRES_DSN=postgres://chess:chesspass@postgres:5432/chess?sslmode=disable
    depends_on:
      - kafka
      - postgres
    networks:
      - chess-network

  # Production build with Nginx
  chess-web:
    build: 
      context: ./chess-web
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=chess-events
      - BACKEND_URL=kafka:8080
    depends_on:
      - go-api
    networks:
      - chess-network
    restart: unless-stopped
    profiles: ["prod"]

  # Development mode with npm
  chess-web-dev:
    build: 
      context: ./chess-web
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_TOPIC=chess-events

    volumes:
      - ./chess-web:/app
      - /app/node_modules
    depends_on:
      - kafka
      - go-api
    networks:
      - chess-network
    command: npm run dev
    profiles: ["dev"]

networks:
  chess-network:
    driver: bridge

volumes:
  postgres-data: